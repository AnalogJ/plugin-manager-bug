import groovy.json.JsonSlurper

plugins {
    id "groovy"
    id "java"
}

group "com.matthiasdenu"
version "1.0-SNAPSHOT"

repositories {
    mavenCentral()
    maven {
        url 'https://repo.jenkins-ci.org/public/'
    }
}

ext {
    jobDslVersion = "1.77"
    jenkinsVersion = "2.252"
}

sourceSets {
    jobs {
        groovy {
            srcDirs "jobs"
            compileClasspath += main.compileClasspath
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    testPlugins
}

dependencies {
    // TODO Match up version numbers with es_jenkins_jobs
    // TODO Try updating versions to see if that fixes the bug

    testPlugins getPluginsFromLockFile()
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.26'

    compile 'org.codehaus.groovy:groovy-all:2.4.12'
    compile "org.jenkins-ci.plugins:job-dsl-core:${jobDslVersion}"
    compile 'org.kohsuke:github-api:1.93'

    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile 'cglib:cglib-nodep:2.2.2' // used by Spock

    // Jenkins test harness dependencies
    compile("org.jenkins-ci.main:jenkins-test-harness:2.59"){
        // https://github.com/sheehan/job-dsl-gradle-example/issues/90
        exclude group: "org.netbeans.modules", module: "org-netbeans-insane"
    }
    compile("org.jenkins-ci.main:jenkins-war:${jenkinsVersion}"){
        // https://github.com/sheehan/job-dsl-gradle-example/issues/87
        exclude group: "org.jenkins-ci.ui", module: "bootstrap"
    }

    // Job DSL plugin including plugin dependencies
    testCompile "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}"
    testCompile "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}@jar"
    testCompile 'org.jenkins-ci.plugins:structs:1.20@jar'

    // Plugins to install in test instance
    testPlugins 'org.jenkins-ci.plugins:cloudbees-folder:5.14'
    testPlugins 'org.jenkins-ci.plugins:credentials:2.1.10'
    testPlugins 'org.jenkins-ci.plugins:cvs:2.13'
    testPlugins 'org.jenkins-ci.plugins:ghprb:1.40.0'
    testPlugins 'org.jenkins-ci.plugins:token-macro:2.5'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-cps-global-lib:2.7'

    // Run the following script in the Script Console of your Jenkins instance to generate
    // the above testPlugins list. (adapted from https://git.io/fjpUs)
    /*
        Jenkins.instance.pluginManager.plugins
            .findAll { !(it.shortName in ['job-dsl', 'structs']) }
            .collect { "testPlugins '${it.manifest.mainAttributes.getValue("Group-Id")}:${it.shortName}:${it.version}'" }
            .sort()
            .each { println it }
     */
}

task resolveTestPlugins(type: Copy) {
    from configurations.testPlugins
    into new File(sourceSets.test.output.resourcesDir, 'test-dependencies')
    include '*.hpi'

    def mapping = configurations
            .testPlugins
            .resolvedConfiguration
            .resolvedArtifacts
            .collectEntries {
                [it.file.name, "${it.name}.${it.extension}"]
            }

    rename { mapping[it] }

    doLast {
        List<String> baseNames = source*.name
                .collect { mapping[it] }
                .collect { it[0..it.lastIndexOf('.') - 1] }
        new File(destinationDir, 'index').setText(baseNames.join('\n'), 'UTF-8')
    }
}

task resolveTestPluginsCustom(type: Copy) {
    from configurations.testPlugins
    into new File(sourceSets.test.output.resourcesDir, 'test-dependencies-custom')
    include '*.hpi'

    def mapping = configurations
            .testPlugins
            .resolvedConfiguration
            .resolvedArtifacts
            .collectEntries {
                [it.file.name, "${it.name}.${it.extension}"]
            }

    rename { mapping[it] }

    doLast {
        List<String> baseNames = source*.name
                .collect { mapping[it] }
                .collect { it[0..it.lastIndexOf('.') - 1] }
        new File(destinationDir, 'index').setText(baseNames.join('\n'), 'UTF-8')
    }
}

test {
    dependsOn tasks.resolveTestPlugins
    dependsOn tasks.resolveTestPluginsCustom

    inputs.files sourceSets.jobs.groovy.srcDirs
    exclude '**/XmlOutput.class'
    exclude '**/BaseSpecification.class'

    systemProperty 'jenkins.test.noSpaceInTmpDirs', 'true'
    systemProperty 'buildDirectory', project.buildDir.absolutePath // JENKINS-26331
    systemProperty 'jenkins.test.timeout', 600 // JENKINS-50642
}

static def getPluginsFromLockFile() {
    def inputFile = new File("plugins.lock")
    def json = new JsonSlurper().parse(inputFile)
    return json.runtime.collect{ k, v ->
        "${k}:${v.locked}"
    }
}